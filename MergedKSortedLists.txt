package Assignment19;

import java.util.PriorityQueue;

class ListNode 
{
    int val;
    ListNode next;
    ListNode(int val) 
    {
        this.val = val;
    }
}
public class MergedKSortedLists 
{
    public ListNode mergeKLists(ListNode[] lists) 
    {
        if (lists == null || lists.length == 0) 
        {
            return null;
        }
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        PriorityQueue<ListNode> minHeap = new PriorityQueue<>((a, b) -> a.val - b.val);
        for (ListNode list : lists)
        {
            if (list != null) 
            {
                minHeap.offer(list);
            }
        }
        while (!minHeap.isEmpty()) 
        {
            ListNode node = minHeap.poll();
            current.next = node;
            current = current.next;
            if (node.next != null) 
            {
                minHeap.offer(node.next);
            }
        }
        return dummy.next;
    }
    public static void main(String[] args) 
    {
        ListNode[] lists = new ListNode[3];
        lists[0] = createList(new int[]{1, 4, 5});
        lists[1] = createList(new int[]{1, 3, 4});
        lists[2] = createList(new int[]{2, 6});
        MergedKSortedLists solution = new MergedKSortedLists();
        ListNode mergedList = solution.mergeKLists(lists);
        printList(mergedList);
    }
    private static ListNode createList(int[] arr) 
    {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        for (int num : arr) 
        {
            current.next = new ListNode(num);
            current = current.next;
        }
        return dummy.next;
    }
    private static void printList(ListNode head) 
    {
        ListNode current = head;
        while (current != null) 
        {
            System.out.print(current.val + ", ");
            current = current.next;
        }
        System.out.println();
    }
}

